services:
  # Ollama - LLM local
  ollama:
    image: ollama/ollama:latest
    container_name: multi_agentes_ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    restart: unless-stopped
    networks:
      - multi_agentes_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # API Principal - FastAPI
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: multi_agentes_api
    ports:
      - "8000:8000"
    volumes:
      - ./chroma_db:/app/chroma_db
      - ./logs:/app/logs
    environment:
      - OLLAMA_BASE_URL=http://ollama:11434
      - OLLAMA_MODEL=mistral:latest
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - API_DEBUG=false
      - CHROMA_PERSIST_DIRECTORY=/app/chroma_db
      - BRAND_NAME=Sua Marca
      - BRAND_PERSONA=Inovadora e próxima do público
      - BRAND_VALUES=Autenticidade, Inovação, Conexão
      - RATE_LIMIT_REQUESTS=100
      - RATE_LIMIT_WINDOW=3600
    depends_on:
      ollama:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - multi_agentes_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx - Proxy reverso e load balancer
  nginx:
    image: nginx:alpine
    container_name: multi_agentes_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - multi_agentes_network

  # Redis - Cache e rate limiting
  redis:
    image: redis:7-alpine
    container_name: multi_agentes_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    networks:
      - multi_agentes_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus - Monitoramento
  prometheus:
    image: prom/prometheus:latest
    container_name: multi_agentes_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - multi_agentes_network

  # Grafana - Dashboard de monitoramento
  grafana:
    image: grafana/grafana:latest
    container_name: multi_agentes_grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - multi_agentes_network

volumes:
  ollama_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  multi_agentes_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16