events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # configurações de log
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # configurações gerais
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # compressão gzip
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=brief:10m rate=2r/s;

    # upstream para API
    upstream api_backend {
        server api:8000;
        keepalive 32;
    }

    # servidor principal
    server {
        listen 80;
        server_name localhost;

        # headers de segurança
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy "strict-origin-when-cross-origin";

        # proxy para API
        location /api/ {
            # rate limiting geral
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://api_backend/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 300s;
        }

        # rate limiting mais restritivo para endpoints de brief
        location /api/brief {
            limit_req zone=brief burst=5 nodelay;
            
            proxy_pass http://api_backend/brief;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # timeouts maiores para processamento de brief
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 600s;
        }

        # health check sem rate limiting
        location /health {
            proxy_pass http://api_backend/health;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            access_log off;
        }

        # docs da API
        location /docs {
            proxy_pass http://api_backend/docs;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # redoc da API
        location /redoc {
            proxy_pass http://api_backend/redoc;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # página inicial simples
        location / {
            return 200 '{"message": "Multi-Agentes Content API", "docs": "/docs", "health": "/health"}';
            add_header Content-Type application/json;
        }

        # erro 404 customizado
        error_page 404 /404.json;
        location = /404.json {
            return 404 '{"error": "Endpoint não encontrado", "docs": "/docs"}';
            add_header Content-Type application/json;
        }

        # erro 50x customizado
        error_page 500 502 503 504 /50x.json;
        location = /50x.json {
            return 500 '{"error": "Erro interno do servidor", "status": "Tente novamente em alguns minutos"}';
            add_header Content-Type application/json;
        }
    }

    # servidor HTTPS (opcional, requer certificados SSL)
    # server {
    #     listen 443 ssl http2;
    #     server_name localhost;
    #
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    #     ssl_prefer_server_ciphers off;
    #
    #     # mesmo conteúdo do servidor HTTP
    #     include /etc/nginx/conf.d/api-locations.conf;
    # }
}